<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Http;
use Illuminate\Http\Request;

class TranscriptionController extends Controller
{
    private static function base64ToBufferAndContentType($encodedData) {
        // NB: encodedData may be a data URI
        $BASE64_MARKER = ';base64,';
        $base64Index = strpos($encodedData, $BASE64_MARKER);
        $mimeType;
        if ($base64Index !== false) {
            if (!str_starts_with($encodedData, "data:")) {
                throw new \Exception("invalid data URI argument: $encodedData");
            }
            $mimeType = substr($encodedData, strlen("data:"),
                $base64Index - strlen("data:"));
            $encodedData = substr($encodedData,
                $base64Index + strlen($BASE64_MARKER));
        }
        $raw = base64_decode($encodedData, true);
        return [$raw, $mimeType];
    }

    public function speechToText(Request $request) {
        $audio = $request->audio;

        [$buffer, $mimeType] = self::base64ToBufferAndContentType($audio);
        $ext = explode("/", $mimeType)[1];
        if (str_contains($ext, ";")) {
            $ext = explode(";", $ext)[0];
        }
        $autoGeneratedNameWithExpectedExt = 'tmp-' .
            time() . '.' . $ext;

        $response = Http::withToken(Config::string('api.openai.secret'))->attach(
            'file', $buffer, $autoGeneratedNameWithExpectedExt, ['Content-Type' => $mimeType]
        )->post('https://api.openai.com/v1/audio/transcriptions', [
            'model' => 'whisper-1',
            'language' => 'en',
        ]);

        if ($response->json()) {
            return response()->json($response->json(),
                $response->ok() ? 200 : 500);
        }

        return respone()->json([
            'error' => [
                'message'=> 'Something went wrong during server processing. Contact the site administrator for assistance'
            ]
        ], 500);
    }
}
