const path = require("node:path")
const { Readable } = require("node:stream")
const fs = require("node:fs/promises")

const express = require('express')
const dotenv = require('dotenv')
const bodyParser = require('body-parser')
const cors = require('cors')

const superagent = require('superagent');

const { base64ToBufferAndContentType } = require('./utils')

dotenv.config()
const app = express()

const port = process.env.PORT || 3000

// parse application/json
app.use(bodyParser.json({
    limit: '10mb'
}))

app.use(cors())

app.get('/', (req, res) => {
    res.send('Hello World!')
})

app.post('/api/speechToText', async (req, res, next) => {
    const { audio } = req.body

    try {
        const [buffer, mimeType] = base64ToBufferAndContentType(audio)
        let ext = mimeType.split("/")[1]
        if (/;/.test(ext)) {
            ext = ext.split(";")[0]
        }
        const autoGeneratedNameWithExpectedExt = 'tmp-' +
            new Date().getTime() + '.' + ext

        // https://ladjs.github.io/superagent/#multipart-requests
        const request = superagent.post('https://api.openai.com/v1/audio/transcriptions')
        request
            .auth(process.env.OPENAI_API_KEY, { type: 'bearer' })
            .field('model', 'whisper-1')
            .field('language', 'en')
            .attach('file', buffer, autoGeneratedNameWithExpectedExt, mimeType)
        const response = await request

        res.json(response.body)
    }
    catch (err) {
        next(err)
        return
    }
})

app.use(function (err, req, res, next) {
    if (err.response) {
        console.log("Superagent error response:", 
            err.reponse.status, "::",
            err.response.text)
    }
    console.error(err.stack);
    res.status(500).send('Something went wrong!');
});

app.listen(port, () => {
    console.log(`Example app listening on port ${port}`)
})
